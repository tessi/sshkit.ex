defmodule SSHKit.SSH.ClientKeyApiTest do
  use ExUnit.Case

  alias SSHKit.SSH.ClientKeyApi

  @decoded_pem {
    :RSAPrivateKey, 
    :"two-prime", 
    22178836200351380318740579128076760436035138298677133998095994045880250237512489621454049374968347715235055783881967698436999743499552314220245159073073380722782484638674394343203468456842721969160490509408462854393345405217052033027002266498826680781860593217442724766608969408399340485759397900671701217164071787627996052566922654086785056460976416517428062469453531934201888286810352377976660566632576939435504625681508553755882812006916212863287750386635961610258614389401711948452227087543533788958800504728999838598664499003820759527927048804714300161960621149036100364182740694238727122433513404946091683042703, 65537, 18953722005479038672989358915211180275890260321558970411086292300953891314102903798293741601596842249220589427161410575497215994540174656492260412045190058045697523798132914292381351875465619868574569967505985612493829380502486125604518301719636021034677605693414631216007271459728426119381823980696705221015479522156363868435684783617296463247438499300802671603744372814426304362919053721052072690042881679754394100902833620569116419541999627788678348085500419601780112784642580771348412671226267444389048117048054825692970232535861820613163424630322678634426098569280437755714074716898258095743415742430656778272361, 152768202594113506003906892512748290305531150912607635622225249629386697488954984355599970491458110778989746505533403503662866670470953760749589017642309508310049856672577159050375653128905845977073586607530375373027518020058386877444130805997536867700689067133764524765224528717473435950253382932149817505499, 145179663200449145917521205971590191715095399605877657860535867727166023541655152176425320419506590078056361653718878871175026174125734643334617196310933880264431271402500332782840931546131335362589195212219385352510583753009500018046055463721898551203113792493296805078356511882223907692461773372201488840797, 42634396225740208200122939165023822110993251906428332934533161660153542229168052609425568156747621132302706312254237302317680568273093737646062272192469000823821839244113039031865521701141155727614567329168722486117358203562383020102433014048475659707426385673383785616612854269230955697241777527641182266133, 101920611626859098746040147787461939524540705867934527984274451657219304776355522780797909077026392768989962056944197903228585062565435177154621093200325875415203905670958966858503264102811489825554515502983073693999716921620063267013762696345283281845431778671957714037110407177460667546919659598114321682045, 113504902981879519219294186506942993139718372538463522557610536232722856450238191548259358573620555616453272575244746754527476128589876390856908911294135573670756100331272684920761429283802284667615556476745952741230523406386621965212672405641392988569738039218761014896354457746693861804733309700621570981767, 
    :asn1_NOVALUE
  }  

  @host_key {
    :RSAPublicKey, 
    21634204163197213132817109123906975906368888521544012567769262995559431966147970056259890368935740096079275379887017970430632559083119648736096672444000478892100121400122505155635695213610246722639150597148186404829574795017869184029845276838222700401896051725788665083080114314875103545837696279553436341967388240785773957395421170074137268759810304409727303757139265883118481355074238232002946450070460602471201997377623196017810991617729908588802783067540409316213603919494955068312762445623851275603318105356333614840694877780018045461415298887693169943421044958989561462337777142733008105081260079805978461159529, 
    35
  }
  
  setup do
    support_dir = Path.join(File.cwd!, "test/support/keys")
    key_file = Path.join(support_dir, "id_rsa")
    known_hosts_tmpl = Path.join(support_dir, "known_hosts.tmpl")
    known_hosts_file = Path.join(support_dir, "known_hosts")
    File.cp!(known_hosts_tmpl, known_hosts_file)
    on_exit(fn -> File.rm!(known_hosts_file) end)    
    %{
      known_hosts_file: known_hosts_file,
      key_file: key_file
    }
  end

  test "add_host_key writes an entry to known hosts if accept_hosts is true", %{known_hosts_file: known_hosts_file} do
    ClientKeyApi.add_host_key(
      "example.com", 
      @host_key, 
      [key_cb_private: [accept_hosts: true, known_hosts_file: known_hosts_file]]
      )
    result = File.read!(known_hosts_file)
    assert result =~ "example.com"
  end

  test "add_host_key returns an error if accept_hosts is false", %{known_hosts_file: known_hosts_file} do
    result = ClientKeyApi.add_host_key(
      "example.com", 
      @host_key, 
      [key_cb_private: [accept_hosts: false,known_hosts_file: known_hosts_file]])    
    assert {:error, _message} = result  
  end  

  test "is_host_key returns true if host and key match known hosts entry", %{known_hosts_file: known_hosts_file} do
    result = ClientKeyApi.is_host_key(
      @host_key,
      'github.com', 
      nil,
      [key_cb_private: [accept_hosts: false, known_hosts_file: known_hosts_file]])
    assert result
  end

  test "is_host_key returns false if host and key do not match known hosts entry", %{known_hosts_file: known_hosts_file} do
    result = ClientKeyApi.is_host_key(
      @host_key,
      'other.com', 
      nil,
      [key_cb_private: [accept_hosts: false, known_hosts_file: known_hosts_file]])
    refute result    
  end  

  test "user key returns the contents of the key option", %{key_file: key_file} do
    result = ClientKeyApi.user_key(
      nil,
      [key_cb_private: [identity: File.read!(key_file)]]
    )
    assert result == {:ok, @decoded_pem}    
  end

  test "with options creates IO devices for the specified files", %{known_hosts_file: known_hosts_file, key_file: key_file }do
    {_module, opts} = ClientKeyApi.with_options([identity: key_file, known_hosts_file: known_hosts_file ])
    assert opts[:identity]
    assert opts[:known_hosts_file]
  end

end